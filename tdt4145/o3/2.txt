
a)

CREATE TABLE KUNDE (
    KUNDENR INT NOT NULL,
    NAVN VARCHAR(30) NOT NULL,
    KREDITTGENSE INT NOT NULL,
    POSTNR VARCHAR(4),
    PRIMARY KEY(KUNDENR),
    FOREIGN KEY (POSTNR) REFERENCES POSTSTED (POSTNR)
);


CREATE TABLE POSTSTED (
    POSTNR VARCHAR(4) NOT NULL,
    POSTSTED VARCHAR(30) NOT NULL,
    PRIMARY KEY (POSTNR)
);

CREATE TABLE BESTILLING (
    ARTNR INT NOT NULL,
    KUNDENR INT NOT NULL,
    KVANTUM INT NOT NULL,
    PRIMARY KEY (ARTNR, KUNDENR),
    FOREIGN KEY (ARTNR) REFERENCES ARTIKKEL (ARTNR),
    FOREIGN KEY (KUNDENR) REFERENCES KUNDE (KUNDENR)
);

CREATE TABLE ARTIKKEL (
    ARTNR INT NOT NULL,
    KUNDENR INT NOT NULL,
    KVANTUM INT NOT NULL,
    PRIMARY KAY (ARTNR, KUNDENR),
    FOREIGN KEY (ARTNR) REFERENCES ARTIKKEL (ARTNR),
    FOREIGN KEY (KUNDENR) REFERENCES KUNDE (KUNDENR),
);

CREATE TABLE ARTIKKEL(
    ARTNR INT NOT NULL,
    NAVN VARCHAR(30) NOT NULL,
    ANT INT NOT NULL,
    PRIS INT NOT NULL,
    PRIMARY KEY (ARTNR)
);


b)

CREATE TABLE BESTILLING (
    ARTNR INT NOT NULL,
    KUNDENR INT NOT NULL,
    KVANTUM INT NOT NULL,
    PRIMARY KEY (ARTNR, KUNDENR),
    FOREIGN KEY (ARTNR) REFERENCES ARTIKKEL (ARTNR) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (KUNDENR) REFERENCES KUNDE (KUNDENR) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE KUNDE (
    KUNDENR INT NOT NULL,
    NAVN VARCHAR(30) NOT NULL,
    KREDITTGENSE INT NOT NULL,
    POSTNR VARCHAR(4),
    PRIMARY KEY(KUNDENR),
    FOREIGN KEY (POSTNR) REFERENCES POSTSTED (POSTNR) ON UPDATE CASCADE
);


c)

CREATE ASSERTION KREDITTSJEKK
    CHECK (
        NOT EXIST (
        SELECT k.kundenr, k.navn, k.kredittgrense
        FROM kunde k, bestilling b, artikkel a
        WHERE k.kundenr = b.kundenr
        AND a.artnr = b.artnr
        GROUP BY k.kundenr
        HAVING SUM(a.pris * b.kvantum) < k.kredittgrense
    )
);




